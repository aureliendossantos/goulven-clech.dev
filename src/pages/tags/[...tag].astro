---
import { CollectionEntry, getCollection } from "astro:content"
import type { Parent } from "$components/Parents.astro"
import Hero from "$components/Hero.astro"
import Layout from "$layouts/Layout.astro"
import Card from "$components/Card.astro"
/**
 * A page with all tags used in our articles.
 */
export async function getStaticPaths() {
  /* get all articles */
  const blogEntries = await getCollection("blog", ({ data }) => {
    return data.draft !== true
  })
  /* get all tags */
  const allTags: Set<string> = new Set()
  blogEntries.forEach((entry) => {
    entry.data.tags.forEach((tag) => {
      allTags.add(tag.toLowerCase())
    })
  })
  // pair each tag with all its articles
  const tagsWithEntries = Object.fromEntries(
    [...allTags].map((tag) => {
      const relatedEntries = blogEntries.filter((entry) => entry.data.tags.includes(tag))
      return [tag, relatedEntries]
    })
  )
  // Now return all static path and related articles
  return Object.entries(tagsWithEntries).map(([tag, relatedEntries]) => ({
    params: { tag: tag },
    props: { tag: tag, entries: relatedEntries },
  }))
}
const tag = Astro.props.tag
const entries: Array<CollectionEntry<"blog">> = Astro.props.entries

// Page title use in Hero & Metadata
const pageTitle = `Tagged ${tag}`

// Page's parents
const parents: Array<Parent> = ["home", "tags"]
---

<Layout title={pageTitle}>
  <Hero title={pageTitle} parents={parents}>
    <div class="flex flex-col gap-3">
      {
        entries
          .sort((a, b) => b.data.date.getDate() - a.data.date.getDate())
          .map((blogEntry, index) => <Card article={blogEntry} index={index} />)
      }
    </div>
  </Hero>
</Layout>
