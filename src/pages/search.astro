---
import { getCollection } from "astro:content"
import Layout from "$layouts/Layout.astro"
import Hero from "$components/Hero.astro"
import type { Parent } from "$components/Parents.astro"
import { formatDate } from "src/utils"

/**
 * A page where users can search any articles. Only made with Astro and vanilla JS.
 * I probably could have done this much easier using React or an already made library...
 * But would I have had as much fun? ðŸ¤·
 */

// Page title use in Hero & Metadata
const pageTitle = "Search"

// Page's parents
const parents: Array<Parent> = ["home"]

// get all blogEntries
const blogEntriesRaw = await getCollection("blog", ({ data }) => {
  return data.draft !== true
})

// can't use formatDate/1 in a script inline, so here we go ðŸ§™
const blogEntries = blogEntriesRaw.map(({ slug, data: { date, ...rest } }) => ({
  slug,
  data: { date: formatDate(date), ...rest },
}))
---

<Layout title={pageTitle}>
  <Hero title={pageTitle} parents={parents}>
    <input
      id="search"
      class="mb-16 w-full rounded-lg bg-highlight-light px-3 py-2 dark:bg-highlight-dark"
      placeholder="Type some keywords..."
      type="text"
    />
    <div id="output" class="flex flex-col gap-6"></div>
  </Hero>
</Layout>
<script>
  /* Can't import & use "define:vars" cause script inline gnagna
    see here -> https://docs.astro.build/en/reference/directives-reference/#definevars */
  import { SearchCard } from "../components/SearchCard.js"
  /**
   * Use a JS vanilla component because Astro component should only be use SSG (cause ViteJS)
   * This SearchCard will be used to display search's results, see ->
   * src/components/SearchCard.js
   */
  customElements.define("search-card", SearchCard)
</script>
<script define:vars={{ blogEntries }}>
  /**
   * Okay, here we go ðŸ§™
   */
  // get the HTML elements on which we will interact
  const input = document.getElementById("search")
  const output = document.getElementById("output")
  /**
   * Function called at each search, returns the list of articles corresponding
   * to the keywords provided in input.
   * @param {string} input - What's the search input?
   * @return {Array<blogEntry>} - Articles returned by the search
   */
  const applyInput = (input) => {
    const searchKeywords = input.toLowerCase().split(" ")
    if (searchKeywords.length > 0) {
      // Filter block entries based on their title, abstract & tags
      // should match every keywords provided by search input !
      results = blogEntries.filter((entry) =>
        searchKeywords.every(
          (keyword) =>
            entry.data.title.toLowerCase().includes(keyword) ||
            entry.data.abstract.toLowerCase().includes(keyword) ||
            entry.data.tags.some((tag) => tag.toLowerCase().includes(keyword))
        )
      )
    } else {
      // if no keywords, return every blog entries
      results = blogEntries
    }
    results.forEach((result) => {
      // For every result, insert a SearchCard in the output
      output.insertAdjacentHTML(
        "beforeend",
        `<search-card title="${result.data.title}" slug="${result.slug}" 
        date="${result.data.date}" tags="${result.data.tags.join(", ")}" 
        abstract="${result.data.abstract}" ></search-card>`
      )
    })
  }
  // On the first page load, initialize the output with an empty search.
  applyInput("")
  // add an event listener on input, to call applyInput/2 at each search
  input.addEventListener("input", (event) => {
    output.innerHTML = ""
    if (event.target) {
      const element = event.currentTarget
      applyInput(element.value)
    }
  })
  // that should do it ðŸ§™
</script>
